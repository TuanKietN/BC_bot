generator client {
  provider = "prisma-client-js"
}

generator kysely {
  provider     = "prisma-kysely"
  output       = "../src/db"
  fileName     = "types.ts"
  enumFileName = "enums.ts"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model message_logs {
  id              Int      @id @default(autoincrement())
  message_id      String
  sender_avatar   String
  sender_name     String
  sender_id       String
  sender_username String
  content         Json
  created_at      DateTime @default(now())
  channel_id      String
  clan_id         String
  clan_avatar     String
  clan_name       String
  clan_username   String
  channel_label   String   @default("")
  display_name    String   @default("")
}

model timesheet_token {
  id         Int      @id @default(autoincrement())
  user_id    String
  token      String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  expires_at DateTime

  @@unique([user_id])
}

model user_balance {
  id         Int      @id @default(autoincrement())
  user_id    String
  username   String
  balance    Int      @default(0)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([user_id])
  @@index([user_id])
}

model transaction_logs {
  id             Int              @id @default(autoincrement())
  user_id        String
  amount         Int
  transaction_id String           @default(uuid())
  created_at     DateTime         @default(now())
  updated_at     DateTime         @updatedAt
  type           ETransactionType @default(DEPOSIT)

  @@unique([transaction_id])
  @@index([user_id, transaction_id])
}

model transaction_send_logs {
  id         Int      @id @default(autoincrement())
  user_id    String
  amount     Int
  to_user_id String
  note       String   @default("bj")
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@index([user_id])
}

enum ETransactionType {
  DEPOSIT
  WITHDRAW
}

enum EBlackjackGameStatus {
  PLAYING
  ENDED
}

enum EBlackjackCardSuit {
  SPADES
  HEARTS
  DIAMONDS
  CLUBS
}

enum EBlackjackPlayerStatus {
  PLAYING
  STAND
  BUST
  BLACKJACK
}

model blackjack_game {
  id                 Int                  @id @default(autoincrement())
  status             EBlackjackGameStatus
  player1_id         String
  player2_id         String
  amount             Int
  game_state1        String               // Player 1's cards
  game_state2        String               // Player 2's cards
  player1_status     EBlackjackPlayerStatus
  player2_status     EBlackjackPlayerStatus
  turn               String               // PLAYER1, PLAYER2, ENDED
  channel_id         String
  message_id         String
  clan_id            String
  is_public_channel  Boolean
  mode               String
  created_at         DateTime             @default(now())
  updated_at         DateTime             @updatedAt

  game_logs blackjack_game_logs[]
}

model blackjack_game_logs {
  id           Int                  @id @default(autoincrement())
  game_id      Int
  user_id      String
  cards        String
  player_status EBlackjackPlayerStatus
  created_at   DateTime             @default(now())
  updated_at   DateTime             @updatedAt

  game blackjack_game @relation(fields: [game_id], references: [id])
}

model tai_xiu_game {
  id              Int      @id @default(autoincrement())
  status          String   // WAITING, ENDED
  player_id       String
  amount          Int
  dice1           Int?
  dice2           Int?
  dice3           Int?
  bet_type        String?  // TAI, XIU
  result          String?  // WIN, LOSE
  channel_id      String
  message_id      String
  clan_id         String
  is_public_channel Boolean
  mode            String
  created_at      DateTime @default(now())
  updated_at      DateTime @updatedAt

  game_logs tai_xiu_game_logs[]

  @@index([player_id])
  @@index([status])
}

model tai_xiu_game_logs {
  id           Int      @id @default(autoincrement())
  game_id      Int
  user_id      String
  dice1        Int
  dice2        Int
  dice3        Int
  total        Int
  bet_type     String
  result       String
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt

  game tai_xiu_game @relation(fields: [game_id], references: [id])
}

enum GameStatus {
  WAITING
  BETTING
  ROLLING
  FINISHED
  CANCELLED
}

enum DiceSymbol {
  FISH
  SHRIMP
  CRAB
  GOURD
  ROOSTER
  DEER
}

model BaucuaGame {
  id          String      @id @default(uuid())
  channelId   String
  messageId   String
  status      GameStatus  @default(WAITING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  startedAt   DateTime?
  endedAt     DateTime?
  totalBets   Int         @default(0)
  totalAmount Int         @default(0)
  
  // Game results
  diceResults BaucuaDiceResult[]
  winners     BaucuaWinner[]
  bets        BaucuaBet[]

  @@index([channelId])
  @@index([status])
}

model BaucuaDiceResult {
  id        String     @id @default(uuid())
  gameId    String
  symbol    DiceSymbol
  position  Int        // Position of the dice (1, 2, or 3)
  createdAt DateTime   @default(now())
  
  // Relations
  game      BaucuaGame @relation(fields: [gameId], references: [id])
  
  @@index([gameId])
}

model BaucuaBet {
  id        String     @id @default(uuid())
  gameId    String
  userId    String
  symbol    DiceSymbol
  amount    Int
  createdAt DateTime   @default(now())
  
  // Relations
  game      BaucuaGame @relation(fields: [gameId], references: [id])
  
  @@index([gameId])
  @@index([userId])
}

model BaucuaWinner {
  id        String   @id @default(uuid())
  gameId    String
  userId    String
  amount    Int
  createdAt DateTime @default(now())
  
  // Relations
  game      BaucuaGame @relation(fields: [gameId], references: [id])
  
  @@index([gameId])
  @@index([userId])
}

model BaucuaPlayerStats {
  id            String   @id @default(uuid())
  userId        String   @unique
  totalGames    Int      @default(0)
  totalBets     Int      @default(0)
  totalWins     Int      @default(0)
  totalLosses   Int      @default(0)
  totalWinnings Int      @default(0)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  @@index([userId])
}